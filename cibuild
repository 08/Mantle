#!/bin/bash
#
# Run this script with the targets/schemes that should be built. For example:
#
# script/cibuild MyApp-iOS MyApp-Mac
#
# The "test" action will be used by default, with the script falling back to
# "build" if testing is not supported.

set -o errexit

SCRIPT_DIR=$(dirname "$0")
cd "$SCRIPT_DIR/.."

##
## Configuration Variables
##

# The build configuration to use.
if [ -z "$CONFIGURATION" ]
then
    CONFIGURATION="Release"
fi

# The workspace to build.
#
# If not set and no workspace is found, the -workspace flag will not be passed
# to xcodebuild.
if [ -z "$WORKSPACE" ]
then
    WORKSPACE=$(ls *.xcworkspace | head -n 1)
fi

# A bootstrap script to run before building.
#
# If this file does not exist, it is not considered an error.
BOOTSTRAP="$SCRIPT_DIR/bootstrap"

##
## Build Process
##

if [ -f "$BOOTSTRAP" ]
then
    echo "*** Bootstrapping…"
    bash "$BOOTSTRAP"
fi

echo "*** Cleaning all targets…"
xcodebuild -alltargets clean

build_scheme ()
{
    local scheme=$1
    local action=$2

    set +o errexit

    if [ -n "$WORKSPACE" ]
    then
        xcodebuild -workspace "$WORKSPACE" -scheme "$scheme" -configuration "$CONFIGURATION" "$action"
    else
        xcodebuild -scheme "$scheme" -configuration "$CONFIGURATION" "$action"
    fi

    local status=$?

    set -o errexit

    return $status
}

test_or_build ()
{
    local scheme=$1
    local output_file=$(mktemp -t xcodebuild.XXX)

    tail -f "$output_file" &
    build_scheme "$scheme" "test" 2>&1 > "$output_file"

    local status=$?

    # Kill the tail -f.
    kill %1

    if [ "$status" -eq "65" ]
    then
        # This probably means the 'test' action isn't supported. Try again with
        # 'build'.
        build_scheme "$scheme" "build"
        status=$?
    fi

    if [ "$status" -eq "65" ]
    then
        # This probably means that there's no scheme by that name.
        echo "*** Error building scheme $scheme (perhaps it doesn't exist)"
    fi

    if [ "$status" -eq "0" ]
    then
        # If Xcode thinks it succeeded, let's double-check the build log.
        #
        # If grep exits with anything other than 1 (no matches), consider it an
        # error.
        status=[ $(grep -E '(BUILD|TEST) FAILED' -q "$output_file") -ne "1" ]
    fi

    return $status
}

echo "*** Building…"

for scheme in "$@"
do
    test_or_build "$scheme"
done
